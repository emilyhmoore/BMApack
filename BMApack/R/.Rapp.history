lmList<-alply(modelMatrix,1, run.regs, .parallel=parallel)
parallel <- FALSE
lmList<-alply(modelMatrix,1, run.regs, .parallel=parallel)
x
y
varNames
conditionals
if(length(allNothing)==1){stop("If specifying allNothing, it must have at least two variables")}
if(length(eitherOr)==1){stop("If specifying eitherOr, it must have at least two variables")}
conditionals<-c(allNothing, eitherOr,always,interactions)
conditionals
unconditionals
conditionalsIndex <- which(varNames%in%conditionals)
unconditionals <- varNames[-conditionalsIndex]
unconditionals
if(length(allNothing)==1){stop("If specifying allNothing, it must have at least two variables")}#
  		    if(length(eitherOr)==1){stop("If specifying eitherOr, it must have at least two variables")}#
          ##Had to comment out this warning because it's giving me trouble for specifying nothing.#
  		    #if(length(interactions) < 2){stop("If specifying interaction, it must have at least two variables")}#
  		    ##The conditionals object contains variables that are conditioned.#
  		    conditionals<-c(allNothing, eitherOr,always,interactions)#
  		    ##conditionalsIndex returns the index of the conditioned variables. This is necessary because we want to separate the conditioned ones from the unconditioned variables.#
  		    conditionalsIndex <- which(varNames%in%conditionals)#
  		    unconditionals <- varNames[-conditionalsIndex]
unconditionals
conditionalsIndex
x
y
varNames
varNames <- colnames(x)
if(length(allNothing)==1){stop("If specifying allNothing, it must have at least two variables")}
if(length(eitherOr)==1){stop("If specifying eitherOr, it must have at least two variables")}
conditionals<-c(allNothing, eitherOr,always,interactions)
conditionalsIndex <- which(varNames%in%conditionals)#
  		    unconditionals <- varNames[-conditionalsIndex]
unconditionals
unconditionalsList<-list()
unconditionalsList
if(length(unconditionals)!=0){#
            length(unconditionalsList)<-length(unconditionals)#
            unconditionalsList<-llply(1:length(unconditionals), #
                                      function(i){unconditionalsList[[i]]<-c(TRUE, FALSE)},#
                                      .parallel=parallel)#
            names(unconditionalsList)<-unconditionals#
          }
unconditionalsList
expand.grid(unconditionalsList)
alwaysCondition <- TRUE
allNothingCondition<-c(TRUE, FALSE)
eitherOrCondition <- c(eitherOr, FALSE)
conditionalsList<-list(alwaysCondition=alwaysCondition, #
                                 allNothingCondition=allNothingCondition, #
                                 eitherOrCondition=eitherOrCondition#
                                 )
conditionalsList
expand.grid(conditionalsList)
Throw errors if the conditions specified are inappropriate.#
  		    if(length(allNothing)==1){stop("If specifying allNothing, it must have at least two variables")}#
  		    if(length(eitherOr)==1){stop("If specifying eitherOr, it must have at least two variables")}#
          ##Had to comment out this warning because it's giving me trouble for specifying nothing.#
  		    #if(length(interactions) < 2){stop("If specifying interaction, it must have at least two variables")}#
  		    ##The conditionals object contains variables that are conditioned.#
  		    conditionals<-c(allNothing, eitherOr,always,interactions)#
  		    ##conditionalsIndex returns the index of the conditioned variables. This is necessary because we want to separate the conditioned ones from the unconditioned variables.#
  		    conditionalsIndex <- which(varNames%in%conditionals)#
  		    unconditionals <- varNames[-conditionalsIndex]#
  		    ##This is an empty list for the unconditioned variables that will be put into the expand.grid function.#
  		    unconditionalsList<-list()#
  		    ##The unconditionalsList will not be created if all variables are conditioned. If there are unconditioned variables, however, the following code generates a list that says TRUE and FALSE for each unconditioned variable.#
  		    if(length(unconditionals)!=0){#
            length(unconditionalsList)<-length(unconditionals)#
            unconditionalsList<-llply(1:length(unconditionals), #
                                      function(i){unconditionalsList[[i]]<-c(TRUE, FALSE)},#
                                      .parallel=parallel)#
            names(unconditionalsList)<-unconditionals#
          }#
          	  ##Expand grid on the unconditioned variables.#
          	  unconditionalsModels <- expand.grid(unconditionalsList)#
#
		      ##The always condition is always included.#
		      alwaysCondition <- TRUE#
		      ##The allNothing condition is either included or not included.#
		      allNothingCondition<-c(TRUE, FALSE)#
		      ##For the eitherOr condition, only one variable is included or none are included. #
		      eitherOrCondition <- c(eitherOr, FALSE)#
		      ##"TRUE" indicates the case when the interaction term is included #
          ##along with the constituent terms. When either of the variables in the #
          ##interactions object is specified, it means that only that variable is included. #
          ##If "both", both constituent terms are included, but not the interaction term. #
          ##If "neither", none of the variables are included.#
          ##Commenting out interactions for now.#
		      #interactionsCondition<-c(TRUE, interactions[1:length(interactions)], "both", "neither")#
		      ##The conditionalsList is all configurations for the conditioned variables combined.#
		      conditionalsList<-list(alwaysCondition=alwaysCondition, #
                                 allNothingCondition=allNothingCondition, #
                                 eitherOrCondition=eitherOrCondition#
                                 )#
            ##Expand grid on the conditioned variables.#
            conditionalsModels <- expand.grid(conditionalsList)
conditionalsModels
unconditionalsModels
conditionals
conditionalsModels <-matrix(rep(0),ncol=length(conditionals), nrow=nrow(conditionalsModels))
conditionalsModels
colnames(conditionalsModels)<- conditionals
conditionalsModels
varNames <- colnames(x)
if(length(allNothing)==1){stop("If specifying allNothing, it must have at least two variables")}
if(length(eitherOr)==1){stop("If specifying eitherOr, it must have at least two variables")}
conditionals<-c(allNothing, eitherOr,always,interactions)
conditionalsIndex <- which(varNames%in%conditionals)
unconditionals <- varNames[-conditionalsIndex]
unconditionalsList<-list()
if(length(unconditionals)!=0){#
            length(unconditionalsList)<-length(unconditionals)#
            unconditionalsList<-llply(1:length(unconditionals), #
                                      function(i){unconditionalsList[[i]]<-c(TRUE, FALSE)},#
                                      .parallel=parallel)#
            names(unconditionalsList)<-unconditionals#
          }
unconditionalsMatrix <- expand.grid(unconditionalsList)
alwaysCondition <- TRUE
allNothingCondition<-c(TRUE, FALSE)
eitherOrCondition <- c(eitherOr, FALSE)
conditionalsList<-list(alwaysCondition=alwaysCondition, #
                                 allNothingCondition=allNothingCondition, #
                                 eitherOrCondition=eitherOrCondition#
                                 )
conditionalsModels <- expand.grid(conditionalsList)
conditionalsModels
conditionalsMatrix <-matrix(rep(0),ncol=length(conditionals), nrow=nrow(conditionalsModels))
colnames(conditionalsMatrix)<- conditionals
conditionalsMatrix
always
conditionalsMatrix[,always]<-conditionalsModels[,"alwaysCondition"]
conditionalsMatrix[,allNothing]<-conditionalsModels[,"allNothingCondition"]
conditionalsMatrix
conditionalsModels
for (i in 1:length(eitherOr)){#
            conditionalsMatrix[,eitherOr[i]]<-conditionalsModels[,"eitherOrCondition"]==eitherOr[i]#
		      }
unconditionalsMatrix
conditionalsMatrix
conditionals
varNames
varNames <- colnames(x)
conditionals<-c(allNothing, eitherOr,always,interactions)
conditionals
allNothing
eitherOr
always
varNames <- colnames(x)
conditionals<-c(always,allNothing, eitherOr)
conditionals
conditionalsIndex <- which(varNames%in%conditionals)
unconditionals <- varNames[-conditionalsIndex]
unconditionalsList<-list()
if(length(unconditionals)!=0){#
            length(unconditionalsList)<-length(unconditionals)#
            unconditionalsList<-llply(1:length(unconditionals), #
                                      function(i){unconditionalsList[[i]]<-c(TRUE, FALSE)},#
                                      .parallel=parallel)#
            names(unconditionalsList)<-unconditionals#
          }
unconditionalsMatrix <- expand.grid(unconditionalsList)
unconditionalsMatrix
alwaysCondition <- TRUE
allNothingCondition<-c(TRUE, FALSE)
eitherOrCondition <- c(eitherOr, FALSE)
conditionalsList<-list(alwaysCondition=alwaysCondition, #
                                 allNothingCondition=allNothingCondition, #
                                 eitherOrCondition=eitherOrCondition#
                                 )
conditionalsModels <- expand.grid(conditionalsList)
conditionalsModels
conditionalsMatrix <-matrix(rep(0),ncol=length(conditionals), nrow=nrow(conditionalsModels))#
		    colnames(conditionalsMatrix)<- conditionals
conditionalsMatrix
conditionalsMatrix[,always]<-conditionalsModels[,"alwaysCondition"]
conditionalsMatrix
conditionalsMatrix[,allNothing]<-conditionalsModels[,"allNothingCondition"]
conditionalsMatrix
for (i in 1:length(eitherOr)){#
            conditionalsMatrix[,eitherOr[i]]<-conditionalsModels[,"eitherOrCondition"]==eitherOr[i]#
		      }
conditionalsMatrix
unconditionals
unconditionalsMatrix
conditionalsMatrix
alply(conditionalsMatrix,1)
temp <- alply(conditionalsMatrix,1)
temp
dim(unconditionalsMatrix)
unconditionalsMatrix
temp[1]
temp[[1]]
c(temp[[1]],unconditionalsMatrix[1,])
c(conditionalsMatrix[1,],unconditionalsMatrix[1,])
conditionalsMatrix[1,]
unconditionalsMatirx[1,]
unconditionalsMatrix[1,]
cbind(conditionalsMatrix[1,],unconditionalsMatrix[1,])
str(conditionalsMatrix)
str(unconditionalsMatrix)
conditionals<-c(always,allNothing,eitherOr)#
  		    ##conditionalsIndex returns the index of the conditioned variables. This is necessary because we want to separate the conditioned ones from the unconditioned variables.#
  		    conditionalsIndex <- which(varNames%in%conditionals)#
  		    unconditionals <- varNames[-conditionalsIndex]#
  		    ##This is an empty list for the unconditioned variables that will be put into the expand.grid function.#
  		    unconditionalsList<-list()#
  		    ##The unconditionalsList will not be created if all variables are conditioned. If there are unconditioned variables, however, the following code generates a list that says TRUE and FALSE for each unconditioned variable.#
  		    if(length(unconditionals)!=0){#
            length(unconditionalsList)<-length(unconditionals)#
            unconditionalsList<-llply(1:length(unconditionals), #
                                      function(i){unconditionalsList[[i]]<-c(TRUE, FALSE)},#
                                      .parallel=parallel)#
            names(unconditionalsList)<-unconditionals#
          }#
          	  ##Expand grid on the unconditioned variables.#
          	  unconditionalsMatrix <- expand.grid(unconditionalsList)#
          	  unconditionalsMatrix <- as.matrix(modelMatrix)
alwaysCondition <- TRUE
allNothingCondition<-c(TRUE, FALSE)
eitherOrCondition <- c(eitherOr, FALSE)
conditionalsList<-list(alwaysCondition=alwaysCondition, #
                                 allNothingCondition=allNothingCondition, #
                                 eitherOrCondition=eitherOrCondition#
                                 )
conditionalsModels <- expand.grid(conditionalsList)
conditionalsMatrix <-matrix(rep(0),ncol=length(conditionals), nrow=nrow(conditionalsModels))
colnames(conditionalsMatrix)<- conditionals
conditionalsMatrix[,always]<-conditionalsModels[,"alwaysCondition"]
conditionalsMatrix[,allNothing]<-conditionalsModels[,"allNothingCondition"]
for (i in 1:length(eitherOr)){#
            conditionalsMatrix[,eitherOr[i]]<-conditionalsModels[,"eitherOrCondition"]==eitherOr[i]#
		      }
conditionalsMatrix
unconditionalsMatrix
if(length(allNothing)==1){stop("If specifying allNothing, it must have at least two variables")}#
  		    if(length(eitherOr)==1){stop("If specifying eitherOr, it must have at least two variables")}#
          ##Had to comment out this warning because it's giving me trouble for specifying nothing.#
  		    #if(length(interactions) < 2){stop("If specifying interaction, it must have at least two variables")}#
  		    ##The conditionals object contains variables that are conditioned.#
  		    conditionals<-c(always,allNothing,eitherOr)#
  		    ##conditionalsIndex returns the index of the conditioned variables. This is necessary because we want to separate the conditioned ones from the unconditioned variables.#
  		    conditionalsIndex <- which(varNames%in%conditionals)#
  		    unconditionals <- varNames[-conditionalsIndex]#
  		    ##This is an empty list for the unconditioned variables that will be put into the expand.grid function.#
  		    unconditionalsList<-list()#
  		    ##The unconditionalsList will not be created if all variables are conditioned. If there are unconditioned variables, however, the following code generates a list that says TRUE and FALSE for each unconditioned variable.#
  		    if(length(unconditionals)!=0){#
            length(unconditionalsList)<-length(unconditionals)#
            unconditionalsList<-llply(1:length(unconditionals), #
                                      function(i){unconditionalsList[[i]]<-c(TRUE, FALSE)},#
                                      .parallel=parallel)#
            names(unconditionalsList)<-unconditionals#
          }#
          	  ##Expand grid on the unconditioned variables.#
          	  unconditionalsMatrix <- expand.grid(unconditionalsList)#
          	  unconditionalsMatrix <- as.matrix(modelMatrix)#
#
		      ##The always condition is always included.#
		      alwaysCondition <- TRUE#
		      ##The allNothing condition is either included or not included.#
		      allNothingCondition<-c(TRUE, FALSE)#
		      ##For the eitherOr condition, only one variable is included or none are included. #
		      eitherOrCondition <- c(eitherOr, FALSE)#
		      ##"TRUE" indicates the case when the interaction term is included #
          ##along with the constituent terms. When either of the variables in the #
          ##interactions object is specified, it means that only that variable is included. #
          ##If "both", both constituent terms are included, but not the interaction term. #
          ##If "neither", none of the variables are included.#
          ##Commenting out interactions for now.#
		      #interactionsCondition<-c(TRUE, interactions[1:length(interactions)], "both", "neither")#
		      ##The conditionalsList is all configurations for the conditioned variables combined.#
		      conditionalsList<-list(alwaysCondition=alwaysCondition, #
                                 allNothingCondition=allNothingCondition, #
                                 eitherOrCondition=eitherOrCondition#
                                 )#
            ##Expand grid on the conditioned variables.#
            conditionalsModels <- expand.grid(conditionalsList)#
            conditionalsMatrix <-matrix(rep(0),ncol=length(conditionals), nrow=nrow(conditionalsModels))#
		    colnames(conditionalsMatrix)<- conditionals#
		          ##Put in the configurations for the alwaysCondition variables into modelMatrix.#
		      conditionalsMatrix[,always]<-conditionalsModels[,"alwaysCondition"]#
		      ##Do the same for the allNothingCondition and eitherOrCondition variables. #
		      conditionalsMatrix[,allNothing]<-conditionalsModels[,"allNothingCondition"]#
		      for (i in 1:length(eitherOr)){#
            conditionalsMatrix[,eitherOr[i]]<-conditionalsModels[,"eitherOrCondition"]==eitherOr[i]#
		      }
conditionalsMatrix
unconditionalsMatrix
conditionals<-c(always,allNothing,eitherOr)
conditionalsIndex <- which(varNames%in%conditionals)#
  		    unconditionals <- varNames[-conditionalsIndex]
unconditionals
conditionals
unconditionalsList<-list()
if(length(unconditionals)!=0){#
            length(unconditionalsList)<-length(unconditionals)#
            unconditionalsList<-llply(1:length(unconditionals), #
                                      function(i){unconditionalsList[[i]]<-c(TRUE, FALSE)},#
                                      .parallel=parallel)#
            names(unconditionalsList)<-unconditionals#
          }
unconditionalsList
unconditionalsMatrix <- expand.grid(unconditionalsList)
unconditionalsMatrix
as.matrix(modelMatrix)
as.matrix(unconditionalsMatrix)
unconditionalsMatrix <- as.matrix(unconditionalsMatrix)
unconditionalsMatrix
alwaysCondition <- TRUE
allNothingCondition<-c(TRUE, FALSE)
eitherOrCondition <- c(eitherOr, FALSE)
conditionalsList<-list(alwaysCondition=alwaysCondition, #
                                 allNothingCondition=allNothingCondition, #
                                 eitherOrCondition=eitherOrCondition#
                                 )
conditionalsModels <- expand.grid(conditionalsList)
conditionalsModels
conditionalsMatrix <-matrix(rep(0),ncol=length(conditionals), nrow=nrow(conditionalsModels))#
		    colnames(conditionalsMatrix)<- conditionals
conditionalsMatrix
conditionalsMatrix[,always]<-conditionalsModels[,"alwaysCondition"]
conditionalsMatrix[,allNothing]<-conditionalsModels[,"allNothingCondition"]
for (i in 1:length(eitherOr)){#
            conditionalsMatrix[,eitherOr[i]]<-conditionalsModels[,"eitherOrCondition"]==eitherOr[i]#
		      }
conditionalsMatrix
unconditionalsMatrix
c(conditionalsMatrix[1,],unconditionalsMatrix[1,])
c(conditionalsMatrix,unconditionalsMatrix[1,])
cbind(conditionalsMatrix,unconditionalsMatrix[1,])
expand.grid(c(conditionalsMatrix[1,],unconditionalsMatrix[1,]))
?expand.grid
expand.grid(unconditionalsMatrix,conditionalsMatirx)
expand.grid(unconditionalsMatrix,conditionalsMatrix)
conditionalsMatrix
unconditionalsMatrix
6*32
conditionalsMatrix[1,],rep(unconditionalsMatrix[1,],nrow(conditionalsMatrix))
c(conditionalsMatrix[1,],rep(unconditionalsMatrix[1,],nrow(conditionalsMatrix)))
cbind(conditionalsMatrix[1,],rep(unconditionalsMatrix[1,],nrow(conditionalsMatrix)))
rep(unconditionalsMatrix[1,],nrow(conditionalsMatrix))
conditionalsMatrix
unconditionalsMatrix
matrix(rep(unconditionalsMatrix[1,],nrow(conditionalsMatrix),ncol=ncol(unconditionalsMatrix))
)
matrix(rep(unconditionalsMatrix[1,],nrow(conditionalsMatrix),ncol=ncol(unconditionalsMatrix)))
matrix(rep(unconditionalsMatrix[1,],nrow(conditionalsMatrix),ncol=ncol(unconditionalsMatrix)),byrow=TRUE)
matrix(rep(unconditionalsMatrix[1,],nrow(conditionalsMatrix),ncol=ncol(unconditionalsMatrix)),byrow=FALSE)
matrix(rep(unconditionalsMatrix[1,],nrow(conditionalsMatrix)),ncol=ncol(unconditionalsMatrix)),byrow=FALSE)
matrix(rep(unconditionalsMatrix[1,],nrow(conditionalsMatrix)),ncol=ncol(unconditionalsMatrix),byrow=FALSE)
unconditionalsMatrix
conditionalsMatrix[1,]
conditionalsMatrix
conditionalsMatrix +matrix(rep(unconditionalsMatrix[1,],nrow(conditionalsMatrix)),ncol=ncol(unconditionalsMatrix),byrow=FALSE)
cbind(conditionalsMatrix,matrix(rep(unconditionalsMatrix[1,],nrow(conditionalsMatrix)),ncol=ncol(unconditionalsMatrix),byrow=FALSE))
unconditionals
cbind(conditionalsMatrix,matrix(rep(unconditionalsMatrix[1,],nrow(conditionalsMatrix)),ncol=ncol(unconditionalsMatrix),byrow=FALSE,dimnames=list(NULL,unconditionals)))
unconditionalsMatrix
aaply(unconditionalsMatrix,1,function(i){cbind(conditionalsMatrix,matrix(rep(unconditionalsMatrix[i,],nrow(conditionalsMatrix)),ncol=ncol(unconditionalsMatrix),byrow=FALSE,dimnames=list(NULL,unconditionals)))}
)
aaply(unconditionalsMatrix,1,function(i){cbind(conditionalsMatrix,matrix(rep(unconditionalsMatrix[i,],nrow(conditionalsMatrix)),ncol=ncol(unconditionalsMatrix),byrow=FALSE,dimnames=list(NULL,unconditionals)))})
cbind(conditionalsMatrix,matrix(rep(unconditionalsMatrix[1,],nrow(conditionalsMatrix)),ncol=ncol(unconditionalsMatrix),byrow=FALSE,dimnames=list(NULL,unconditionals)))
cbind(conditionalsMatrix,matrix(rep(unconditionalsMatrix[2,],nrow(conditionalsMatrix)),ncol=ncol(unconditionalsMatrix),byrow=FALSE,dimnames=list(NULL,unconditionals)))
cbind(conditionalsMatrix,matrix(rep(unconditionalsMatrix[3,],nrow(conditionalsMatrix)),ncol=ncol(unconditionalsMatrix),byrow=FALSE,dimnames=list(NULL,unconditionals)))
cbind(conditionalsMatrix,matrix(rep(unconditionalsMatrix[10,],nrow(conditionalsMatrix)),ncol=ncol(unconditionalsMatrix),byrow=FALSE,dimnames=list(NULL,unconditionals)))
for(i in 1:nrow(unconditionalsMatrix)){#
		    	cbind(conditionalsMatrix,matrix(rep(unconditionalsMatrix[i,],nrow(conditionalsMatrix)),ncol=ncol(unconditionalsMatrix),byrow=FALSE,dimnames=list(NULL,unconditionals)))#
		    }
a <- cbind(conditionalsMatrix,matrix(rep(unconditionalsMatrix[3,],nrow(conditionalsMatrix)),ncol=ncol(unconditionalsMatrix),byrow=FALSE,dimnames=list(NULL,unconditionals)))
g <- cbind(conditionalsMatrix,matrix(rep(unconditionalsMatrix[2,],nrow(conditionalsMatrix)),ncol=ncol(unconditionalsMatrix),byrow=FALSE,dimnames=list(NULL,unconditionals)))
a
g
rowbind(a,g)
rbind(a,g)
modelConfigurations <- NULL
for(i in 1:nrow(unconditionalsMatrix)){#
		 temp <- cbind(conditionalsMatrix,matrix(rep(unconditionalsMatrix[i,],nrow(conditionalsMatrix)),ncol=ncol(unconditionalsMatrix),byrow=FALSE,dimnames=list(NULL,unconditionals)))   	modelConfigurations <- c(modelConfigurations,temp)#
		    }
for(i in 1:nrow(unconditionalsMatrix)){
temp <- cbind(conditionalsMatrix,matrix(rep(unconditionalsMatrix[i,],nrow(conditionalsMatrix)),ncol=ncol(unconditionalsMatrix),byrow=FALSE,dimnames=list(NULL,unconditionals)))   	modelConfigurations <- c(modelConfigurations,temp)
for(i in 1:nrow(unconditionalsMatrix)){#
		 temp <- cbind(conditionalsMatrix,matrix(rep(unconditionalsMatrix[i,],nrow(conditionalsMatrix)),ncol=ncol(unconditionalsMatrix),byrow=FALSE,dimnames=list(NULL,unconditionals)))#
		    	modelConfigurations <- c(modelConfigurations,temp)#
		    }
modelConfigurations
modelConfigurations <- NULL#
		    for(i in 1:nrow(unconditionalsMatrix)){#
		 temp <- cbind(conditionalsMatrix,matrix(rep(unconditionalsMatrix[i,],nrow(conditionalsMatrix)),ncol=ncol(unconditionalsMatrix),byrow=FALSE,dimnames=list(NULL,unconditionals)))#
		    	modelConfigurations <- rbind(modelConfigurations,temp)#
		    }
modelConfigurations
32*6
aaply(unconditionalsMatrix,1,function(i){#
cbind(conditionalsMatrix,matrix(rep(unconditionalsMatrix[i,],nrow(conditionalsMatrix)),ncol=ncol(unconditionalsMatrix),byrow=FALSE,dimnames=list(NULL,unconditionals)))#
		    })
alply(unconditionalsMatrix,1,function(i){#
cbind(conditionalsMatrix,matrix(rep(unconditionalsMatrix[i,],nrow(conditionalsMatrix)),ncol=ncol(unconditionalsMatrix),byrow=FALSE,dimnames=list(NULL,unconditionals)))#
		    })
str(conditionalsMatrix)
class(conditionalsMatrix)
adply(unconditionalsMatrix,1,function(i){#
cbind(conditionalsMatrix,matrix(rep(unconditionalsMatrix[i,],nrow(conditionalsMatrix)),ncol=ncol(unconditionalsMatrix),byrow=FALSE,dimnames=list(NULL,unconditionals)))#
		    })
alply(unconditionalsMatrix,1,function(i){#
cbind(conditionalsMatrix,matrix(rep(unconditionalsMatrix[i,],nrow(conditionalsMatrix)),ncol=ncol(unconditionalsMatrix),byrow=FALSE,dimnames=list(NULL,unconditionals)))#
		    })
varNames <- colnames(x)
conditionals<-c(always,allNothing,eitherOr)
conditionals
conditionalsIndex <- which(varNames%in%conditionals)#
  		    unconditionals <- varNames[-conditionalsIndex]
unconditionals
unconditionalsList<-list()
if(length(unconditionals)!=0){#
            length(unconditionalsList)<-length(unconditionals)#
            unconditionalsList<-llply(1:length(unconditionals), #
                                      function(i){unconditionalsList[[i]]<-c(TRUE, FALSE)},#
                                      .parallel=parallel)#
            names(unconditionalsList)<-unconditionals#
          }
unconditionalsMatrix <- expand.grid(unconditionalsList)
unconditionalsMatrix
unconditionalsMatrix <- as.matrix(unconditionalsMatrix)
alwaysCondition <- TRUE
allNothingCondition<-c(TRUE, FALSE)
eitherOrCondition <- c(eitherOr, FALSE)
conditionalsList<-list(alwaysCondition=alwaysCondition, #
                                 allNothingCondition=allNothingCondition, #
                                 eitherOrCondition=eitherOrCondition#
                                 )
conditionalsModels <- expand.grid(conditionalsList)
conditionalsMdoels
conditionalsModels
conditionalsMatrix <-matrix(rep(0),ncol=length(conditionals), nrow=nrow(conditionalsModels))#
		    colnames(conditionalsMatrix)<- conditionals
conditionalsMatrix[,always]<-conditionalsModels[,"alwaysCondition"]
conditionalsMatrix
conditionalsMatrix[,allNothing]<-conditionalsModels[,"allNothingCondition"]#
		      for (i in 1:length(eitherOr)){#
            conditionalsMatrix[,eitherOr[i]]<-conditionalsModels[,"eitherOrCondition"]==eitherOr[i]#
		      }
unconditionalsMatrix
conditionalsMatrix
modelConfigurations <- NULL#
		    for(i in 1:nrow(unconditionalsMatrix)){#
		 temp <- cbind(conditionalsMatrix,matrix(rep(unconditionalsMatrix[i,],nrow(conditionalsMatrix)),ncol=ncol(unconditionalsMatrix),byrow=FALSE,dimnames=list(NULL,unconditionals)))#
		 modelConfigurations <- rbind(modelConfigurations,temp)#
		    }
modelConfigurations
modelConfigurations <- NULL
aaply(unconditionalsMatrix,1,function(i){#
		    	cbind(conditionalsMatrix,matrix(rep(unconditionalsMatrix[i,],nrow(conditionalsMatrix)),ncol=ncol(unconditionalsMatrix),byrow=FALSE,dimnames=list(NULL,unconditionals)))#
		    })
