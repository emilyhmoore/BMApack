alwaysCondition <- TRUE
allNothingCondition<-c(TRUE, FALSE)
list(alwaysCondition=alwaysCondition, #
                                    allNothingCondition=allNothingCondition)
restrictedsList<-list(alwaysCondition=alwaysCondition, #
                                    allNothingCondition=allNothingCondition)
restricteds[-c(which(restricteds%in%always), #
                                                which(restricteds%in%unlist(allNothing)))]
otherrestricteds<-restricteds[-c(which(restricteds%in%always), #
                                                which(restricteds%in%unlist(allNothing)))]
otherrestrictedsList<-list()#
               if(length(otherrestricteds)!=0){#
		          otherrestrictedsList<-llply(1:length(otherrestricteds),#
                                          function(i){otherrestrictedsList[[i]]<-c(TRUE, FALSE)},#
                                          .parallel=parallel)#
                                          }
otherrestrictedsList
names(otherrestrictedsList)<-otherrestricteds
otherrestrictedsList
c(restrictedsList, otherrestrictedsList)
restrictedsList<-c(restrictedsList, otherrestrictedsList)
restricteds<-c(unlist(allNothing),always,unlist(eitherOr))
restrictedsIndex <- which(varNames%in%restricteds)
unrestricteds <- varNames[-restrictedsIndex]
alwaysCondition <- TRUE
allNothing
c(allNothing)
length(allNothing)
rep(c(TRUE, FALSE),length(allNothing))
allNothingCondition<-rep(c(TRUE, FALSE),length(allNothing))
restrictedsList<-list(alwaysCondition=alwaysCondition, #
                                    allNothingCondition=allNothingCondition)
restrictedsList
contains variables that are conditioned.#
  		        restricteds<-c(unlist(allNothing),always,unlist(eitherOr))#
  		        ##restrictedsIndex returns the index of the conditioned variables. #
              ##This is necessary because we want to separate the conditioned ones #
              ##from the unconditioned variables.#
  		        restrictedsIndex <- which(varNames%in%restricteds)#
  		        unrestricteds <- varNames[-restrictedsIndex]#
#
		          ##The always condition is always included.#
		          alwaysCondition <- TRUE#
		          ##The allNothing condition is either included or not included.#
		          allNothingCondition<-          replicate(length(allNothing),c(TRUE, FALSE))
allNothingCondition
allNothingCondition<-          replicate(length(allNothing),list(TRUE, FALSE))
allNothingCondition
tains variables that are conditioned.#
  		        restricteds<-c(unlist(allNothing),always,unlist(eitherOr))#
  		        ##restrictedsIndex returns the index of the conditioned variables. #
              ##This is necessary because we want to separate the conditioned ones #
              ##from the unconditioned variables.#
  		        restrictedsIndex <- which(varNames%in%restricteds)#
  		        unrestricteds <- varNames[-restrictedsIndex]#
#
		          ##The always condition is always included.#
		          alwaysCondition <- TRUE#
		          ##The allNothing condition is either included or not included.#
		          allNothingCondition<-          replicate(length(allNothing),list(c(TRUE, FALSE)))
allNothingCondition
list(alwaysCondition=alwaysCondition, #
                                    allNothingCondition=allNothingCondition)
c(alwaysCondition=alwaysCondition, #
                                    allNothingCondition=allNothingCondition)
allNothingCondition
c(alwaysCondition=alwaysCondition, #
                                    replicate(length(allNothing),allNothingCondition=allNothingCondition[1])
c(alwaysCondition=alwaysCondition, #
                                    replicate(length(allNothing),allNothingCondition=allNothingCondition[1]))
replicate(length(allNothing),allNothingCondition=allNothingCondition[1])
replicate(length(allNothing),allNothingCondition=allNothingCondition[[1]])
allNothingCondition=allNothingCondition[[1]]
rep(allNothingCondition=allNothingCondition[[1]],length(allNothing))
c(alwaysCondition=alwaysCondition, #
                                    rep(allNothingCondition=allNothingCondition[[1]],length(allNothing)))
c(alwaysCondition=alwaysCondition, #
                                    allNothingCondition=allNothingCondition)
restricteds<-c(unlist(allNothing),always,unlist(eitherOr))#
  		        ##restrictedsIndex returns the index of the conditioned variables. #
              ##This is necessary because we want to separate the conditioned ones #
              ##from the unconditioned variables.#
  		        restrictedsIndex <- which(varNames%in%restricteds)#
  		        unrestricteds <- varNames[-restrictedsIndex]#
#
		          ##The always condition is always included.#
		          alwaysCondition <- TRUE#
		          ##The allNothing condition is either included or not included.#
		          allNothingCondition<-          replicate(length(allNothing),list(c(TRUE, FALSE)))
allNothingCondition
c(alwaysCondition=alwaysCondition, #
                                    allNothingCondition=allNothingCondition)
restrictedsList<-c(alwaysCondition=alwaysCondition, #
                                    allNothingCondition=allNothingCondition)
restrictedsList
restrictedsList[-1]
names(restrictedsList[-1]) <- "allNothingCondition"
restrictedsList
names(restrictedsList[-1])
names(restrictedsList[-1]) <- "allNothingCondition"
restrictedsList
names(restrictedsList[-1]) <- rep("allNothingCondition",length(allNothing))
restrictedsList
names(restrictedsList)[-1]
names(restrictedsList)[-1] <- "allNothingCondition"
restrictedsList
restricteds[-c(which(restricteds%in%always), #
                                                which(restricteds%in%unlist(allNothing)))]
otherrestricteds<-restricteds[-c(which(restricteds%in%always), #
                                                which(restricteds%in%unlist(allNothing)))]
otherrestricteds
otherrestrictedsList<-list()#
               if(length(otherrestricteds)!=0){#
		          otherrestrictedsList<-llply(1:length(otherrestricteds),#
                                          function(i){otherrestrictedsList[[i]]<-c(TRUE, FALSE)},#
                                          .parallel=parallel)#
                                          }
otherrestrictedsList
names(otherrestrictedsList)<-otherrestricteds
restrictedsList<-c(restrictedsList, otherrestrictedsList)
restrictedsList
restrictedsModels <- expand.grid(restrictedsList)
matrix(rep(FALSE),ncol=length(c(unlist(allNothing), always)), #
                                      nrow=nrow(restrictedsModels))
restrictedsMatrix <-matrix(rep(FALSE),ncol=length(c(unlist(allNothing), always)), #
                                      nrow=nrow(restrictedsModels))
colnames(restrictedsMatrix)<-c(unlist(allNothing), always)
head(restrictedMatrix)
head(restrictedsMatrix)
restrictedsMatrix[,always]<-restrictedsModels[,"alwaysCondition"]
head(restrictedsModel)
head(restrictedsModels)
restrictedsModels[,"allNothingCondition"]
dim(restrictedsModels)
unlist(allNothing)
varNames
c(unlist(allNothing),always,unlist(eitherOr))
restricteds<-c(unlist(allNothing),always,unlist(eitherOr))
restrictedsIndex <- which(varNames%in%restricteds)#
  		        unrestricteds <- varNames[-restrictedsIndex]
alwaysCondition <- TRUE
replicate(length(allNothing),list(c(TRUE, FALSE)))
allNothingCondition<-          replicate(length(allNothing),list(c(TRUE, FALSE)))
allNothingCondition
c(alwaysCondition=alwaysCondition, #
                                    allNothingCondition=allNothingCondition)
restrictedsList<-c(alwaysCondition=alwaysCondition, #
                                    allNothingCondition=allNothingCondition)
names(restrictedsList)[-1]
allNothingConditionNames <- names(restrictedsList)[-1]
allNothingConditionNames
restricteds[-c(which(restricteds%in%always), #
                                                which(restricteds%in%unlist(allNothing)))]
otherrestricteds<-restricteds[-c(which(restricteds%in%always), #
                                                which(restricteds%in%unlist(allNothing)))]
otherrestrictedsList<-list()#
               if(length(otherrestricteds)!=0){#
		          otherrestrictedsList<-llply(1:length(otherrestricteds),#
                                          function(i){otherrestrictedsList[[i]]<-c(TRUE, FALSE)},#
                                          .parallel=parallel)#
                                          }
otherrestrictedsList
otherrestricteds
names(otherrestrictedsList)<-otherrestricteds
c(restrictedsList, otherrestrictedsList)
restrictedsList<-c(restrictedsList, otherrestrictedsList)
expand.grid(restrictedsList)
restrictedsModels <- expand.grid(restrictedsList)
matrix(rep(FALSE),ncol=length(c(unlist(allNothing), always)), #
                                      nrow=nrow(restrictedsModels))
restrictedsMatrix <-matrix(rep(FALSE),ncol=length(c(unlist(allNothing), always)), #
                                      nrow=nrow(restrictedsModels))
c(unlist(allNothing), always)
colnames(restrictedsMatrix)<-c(unlist(allNothing), always)
restrictedsModels
restrictedsMatrix
restrictedsMatrix[,always]<-restrictedsModels[,"alwaysCondition"]
restrictedsMatrix
head(restrictedsModels)
head(restrictedsMatrix)
allNothing
allNothing[[1]]
for(i in 1:length(allNothing){#
		restrictedsMatrix[,allNothing[[i]]]<-restrictedsModels[,allNothingConditionNames[i]]#
		}
for(i in 1:length(allNothing)){#
		restrictedsMatrix[,allNothing[[i]]]<-restrictedsModels[,allNothingConditionNames[i]]#
		}
head(restrictedsMatrix)
head(restrictedsModels)
head(restrictedsMatrix)
cbind(restrictedsMatrix,restrictedsModels[,otherrestricteds])
restrictedsMatrix<-cbind(restrictedsMatrix,restrictedsModels[,otherrestricteds])
eitherOrTest<-function(x){length(which(x==TRUE))==1 | any(as.logical(x))==FALSE}
head(restrictedsMatrix)
unlist(alply(restrictedsMatrix[eitherOr[[i]]], 1, eitherOrTest,i=1:length(eitherOr)))
for(i in 1:length(eitherOr)){#
              	unlist(alply(restrictedsMatrix[eitherOr[[i]]], 1, eitherOrTest))#
              	}
eitherOrStripIndex <- NULL
eitherOrTestResults <- NULL#
              for(i in 1:length(eitherOr)){#
              	eitherOrStripIndex <- unlist(alply(restrictedsMatrix[eitherOr[[i]]], 1, eitherOrTest))#
              	eitherOrTestResults <- c(eitherOrTestResults,eitherOrStripIndex)#
              	}
eitherOrTestResults
eitherOrTestResults <- list()#
              for(i in 1:length(eitherOr)){#
              	eitherOrStripIndex <- unlist(alply(restrictedsMatrix[eitherOr[[i]]], 1, eitherOrTest))#
              	eitherOrTestResults <- c(eitherOrTestResults,eitherOrStripIndex)#
              	}
eitherOrTestResults
eitherOrTestResults <- replicate(length(eitherOr),list())
eitherOrTestResults
for(i in 1:length(eitherOr)){#
              	eitherOrStripIndex <- unlist(alply(restrictedsMatrix[eitherOr[[i]]], 1, eitherOrTest))#
              	eitherOrTestResults <- c(eitherOrTestResults,eitherOrStripIndex)#
              	}
eitherOrTestResult
eitherOrTestResults <- replicate(length(eitherOr),list())#
              for(i in 1:length(eitherOr)){#
              	eitherOrStripIndex <- unlist(alply(restrictedsMatrix[eitherOr[[i]]], 1, eitherOrTest))#
              	eitherOrTestResults <- c(eitherOrTestResults,eitherOrStripIndex)#
              	}
eitherOrTestResults
unlist(alply(restrictedsMatrix[eitherOr[[1]]], 1, eitherOrTest))
eitherOrTestResults <- NULL#
              for(i in 1:length(eitherOr)){#
              	eitherOrStripIndex <- unlist(alply(restrictedsMatrix[eitherOr[[i]]], 1, eitherOrTest))#
              	eitherOrTestResults <- list(eitherOrTestResults,eitherOrStripIndex)#
              	}
eitherOrTestResults
eitherOrTestResults <- NULL#
              for(i in 1:length(eitherOr)){#
              	eitherOrStripIndex <- unlist(alply(restrictedsMatrix[eitherOr[[i]]], 1, eitherOrTest))#
              	eitherOrTestResults <- c(eitherOrTestResults,eitherOrStripIndex)#
              	}
eitherOrTestResults
?split
eitherOrTestResults <- NULL#
              for(i in 1:length(eitherOr)){#
              	eitherOrStripIndex <- unlist(alply(restrictedsMatrix[eitherOr[[i]]], 1, eitherOrTest))#
              	eitherOrTestResults <- list(eitherOrTestResults,eitherOrStripIndex)#
              	}
eitherOrTestResults
eitherOrTestResults[[-1]]
eitherOrTestResults <- NULL#
              for(i in 1:length(eitherOr)){#
              	eitherOrStripIndex <- unlist(alply(restrictedsMatrix[eitherOr[[i]]], 1, eitherOrTest))#
              	eitherOrTestResults <- c(eitherOrTestResults,eitherOrStripIndex)#
              	}
eitherOrTestResults
split(eitherOrTestResults)
restrictedsMatrix
nrow(restrictedsMatrix)
seq(1,length(eitherOrTestResults),by=nrow(restrictedsMatrix))
alply(restrictedsMatrix[eitherOr[[1]]], 1, eitherOrTest)
aaply(restrictedsMatrix[eitherOr[[1]]], 1, eitherOrTest)
unlist(alply(restrictedsMatrix[eitherOr[[1]]], 1, eitherOrTest))
eitherOrTestResults <- NULL#
              for(i in 1:length(eitherOr)){#
              	eitherOrStripIndex <- unlist(alply(restrictedsMatrix[eitherOr[[i]]], 1, eitherOrTest))#
              	eitherOrTestResults <- list(eitherOrTestResults,eitherOrStripIndex)#
              	}
eitherOrTestResults
eitherOrTestResults[1]
eitherOrTestResults[1][1]
eitherOrTestResults[1][[1]]
eitherOrTestResults
restrictedsMatrix
eitherOrTestResults <- NULL#
              for(i in 1:length(eitherOr)){#
              	eitherOrStripIndex <- unlist(alply(restrictedsMatrix[eitherOr[[i]]], 1, eitherOrTest))#
              	eitherOrTestResults <- c(eitherOrTestResults,eitherOrStripIndex)#
              	}
eitherOrTestResults
matrix(eitherOrTestResults,ncol=length(eitherOr),byrow=FALSE)
eitherOrTestResults <- matrix(eitherOrTestResults,ncol=length(eitherOr),byrow=FALSE)
eitherOrTestResults
head(restrictedsMatrix)
?all
aaply(eitherOrTestResults,1,function(x){#
              	ifelse(all(x),TRUE,FALSE)#
              })
eitherOrTestResultsCombined <- aaply(eitherOrTestResults,1,#
              function(x){#
              	ifelse(all(x),TRUE,FALSE)#
              })
eitherOrTestResultsCombined
head(restrictedsMatrix)
restrictedsMatrix<-restrictedsMatrix[eitherOrTestResults,]
restrictedsMatrix
restricteds<-c(unlist(allNothing),always,unlist(eitherOr))#
  		        ##restrictedsIndex returns the index of the conditioned variables. #
              ##This is necessary because we want to separate the conditioned ones #
              ##from the unconditioned variables.#
  		        restrictedsIndex <- which(varNames%in%restricteds)#
  		        unrestricteds <- varNames[-restrictedsIndex]#
#
		          ##The always condition is always included.#
		          alwaysCondition <- TRUE#
		          ##The allNothing condition is either included or not included.#
		          allNothingCondition<-          replicate(length(allNothing),list(c(TRUE, FALSE)))#
              ##We will need to be able to take lists of allnothings eventually.#
              ###
		          ##The restrictedsList is all configurations for the conditioned variables combined.#
		          restrictedsList<-c(alwaysCondition=alwaysCondition, #
                                    allNothingCondition=allNothingCondition)#
              allNothingConditionNames <- names(restrictedsList)[-1]#
              ##This is all restricteds that are not always or allNothing types#
  		        otherrestricteds<-restricteds[-c(which(restricteds%in%always), #
                                                which(restricteds%in%unlist(allNothing)))]#
              ##Make a list for the variables that are just going to be true false before they are #
              ##stripped away#
              otherrestrictedsList<-list()#
               if(length(otherrestricteds)!=0){#
		          otherrestrictedsList<-llply(1:length(otherrestricteds),#
                                          function(i){otherrestrictedsList[[i]]<-c(TRUE, FALSE)},#
                                          .parallel=parallel)#
                                          }#
                                           names(otherrestrictedsList)<-otherrestricteds#
              restrictedsList<-c(restrictedsList, otherrestrictedsList)#
#
              ##Expand grid on the conditioned variables.#
              restrictedsModels <- expand.grid(restrictedsList)#
#
              restrictedsMatrix <-matrix(rep(FALSE),ncol=length(c(unlist(allNothing), always)), #
                                      nrow=nrow(restrictedsModels))#
              colnames(restrictedsMatrix)<-c(unlist(allNothing), always)#
		          ##Put in the configurations for the alwaysCondition variables into restrictedsMatrix.#
		          restrictedsMatrix[,always]<-restrictedsModels[,"alwaysCondition"]#
#
		          ##Do the same for the allNothingCondition.This should look the same #
              ##for each variable in a set of allNothings #
	for(i in 1:length(allNothing)){#
		restrictedsMatrix[,allNothing[[i]]]<-restrictedsModels[,allNothingConditionNames[i]]#
		}#
              ##cbind that to the expandgrid results for any of the "otherrestricteds" #
              ##which is just restricteds that are not always or allNothing types.#
              ##They vary as normal in expand grid and are stripped out later.#
              restrictedsMatrix<-cbind(restrictedsMatrix,restrictedsModels[,otherrestricteds])#
              ################################################################################
              ###############This is where we need to strip out "bad" models##################
              ###############BEFORE the temp variable is created for use with#################
              ###############the unrestricteds################################################
              ################################################################################
              ##This strips out models that fail the eitherOr test. #
              ##Basically, it makes sure there is only one TRUE or all FALSES#
              ##I have the as.logical line in there because, for some reason,#
              ##it doesn't think the restrictedsMatrix is a logical.#
  		        eitherOrTest<-function(x){length(which(x==TRUE))==1 | any(as.logical(x))==FALSE}##good models are true#
              ##Cannot apply over the whole row or it will apply to always and allNothing too#
              ##so this indexes the matrix according only to those models in eitherOr#
              ##The unlist part is to get it as a vector that can be used for indexing the whole matrix.#
              eitherOrTestResults <- NULL#
              for(i in 1:length(eitherOr)){#
              	eitherOrStripIndex <- unlist(alply(restrictedsMatrix[eitherOr[[i]]], 1, eitherOrTest))#
              	eitherOrTestResults <- c(eitherOrTestResults,eitherOrStripIndex)#
              	}#
              eitherOrTestResults <- matrix(eitherOrTestResults,ncol=length(eitherOr),byrow=FALSE)#
              eitherOrTestResultsCombined <- aaply(eitherOrTestResults,1,#
              function(x){#
              	ifelse(all(x),TRUE,FALSE)#
              })
eitherOrTestResultsCombined
length(eitherOrTestResultsCombined)
restrictedsMatrix
restrictedsMatrix[eitherOrTestResults,]
eitherOrTestResults
restrictedsMatrix[eitherOrTestResultsCombined,]
restricteds<-c(unlist(allNothing),always,unlist(eitherOr))#
  		        ##restrictedsIndex returns the index of the conditioned variables. #
              ##This is necessary because we want to separate the conditioned ones #
              ##from the unconditioned variables.#
  		        restrictedsIndex <- which(varNames%in%restricteds)#
  		        unrestricteds <- varNames[-restrictedsIndex]#
#
		          ##The always condition is always included.#
		          alwaysCondition <- TRUE#
		          ##The allNothing condition is either included or not included.#
		          allNothingCondition<-          replicate(length(allNothing),list(c(TRUE, FALSE)))#
              ##We will need to be able to take lists of allnothings eventually.#
              ###
		          ##The restrictedsList is all configurations for the conditioned variables combined.#
		          restrictedsList<-c(alwaysCondition=alwaysCondition, #
                                    allNothingCondition=allNothingCondition)#
              allNothingConditionNames <- names(restrictedsList)[-1]#
              ##This is all restricteds that are not always or allNothing types#
  		        otherrestricteds<-restricteds[-c(which(restricteds%in%always), #
                                                which(restricteds%in%unlist(allNothing)))]#
              ##Make a list for the variables that are just going to be true false before they are #
              ##stripped away#
              otherrestrictedsList<-list()#
               if(length(otherrestricteds)!=0){#
		          otherrestrictedsList<-llply(1:length(otherrestricteds),#
                                          function(i){otherrestrictedsList[[i]]<-c(TRUE, FALSE)},#
                                          .parallel=parallel)#
                                          }#
                                           names(otherrestrictedsList)<-otherrestricteds#
              restrictedsList<-c(restrictedsList, otherrestrictedsList)#
#
              ##Expand grid on the conditioned variables.#
              restrictedsModels <- expand.grid(restrictedsList)#
#
              restrictedsMatrix <-matrix(rep(FALSE),ncol=length(c(unlist(allNothing), always)), #
                                      nrow=nrow(restrictedsModels))#
              colnames(restrictedsMatrix)<-c(unlist(allNothing), always)#
		          ##Put in the configurations for the alwaysCondition variables into restrictedsMatrix.#
		          restrictedsMatrix[,always]<-restrictedsModels[,"alwaysCondition"]#
#
		          ##Do the same for the allNothingCondition.This should look the same #
              ##for each variable in a set of allNothings #
	for(i in 1:length(allNothing)){#
		restrictedsMatrix[,allNothing[[i]]]<-restrictedsModels[,allNothingConditionNames[i]]#
		}#
              ##cbind that to the expandgrid results for any of the "otherrestricteds" #
              ##which is just restricteds that are not always or allNothing types.#
              ##They vary as normal in expand grid and are stripped out later.#
              restrictedsMatrix<-cbind(restrictedsMatrix,restrictedsModels[,otherrestricteds])#
              ################################################################################
              ###############This is where we need to strip out "bad" models##################
              ###############BEFORE the temp variable is created for use with#################
              ###############the unrestricteds################################################
              ################################################################################
              ##This strips out models that fail the eitherOr test. #
              ##Basically, it makes sure there is only one TRUE or all FALSES#
              ##I have the as.logical line in there because, for some reason,#
              ##it doesn't think the restrictedsMatrix is a logical.#
  		        eitherOrTest<-function(x){length(which(x==TRUE))==1 | any(as.logical(x))==FALSE}##good models are true#
              ##Cannot apply over the whole row or it will apply to always and allNothing too#
              ##so this indexes the matrix according only to those models in eitherOr#
              ##The unlist part is to get it as a vector that can be used for indexing the whole matrix.#
              eitherOrTestResults <- NULL#
              for(i in 1:length(eitherOr)){#
              	eitherOrStripIndex <- unlist(alply(restrictedsMatrix[eitherOr[[i]]], 1, eitherOrTest))#
              	eitherOrTestResults <- c(eitherOrTestResults,eitherOrStripIndex)#
              	}#
              eitherOrTestResults <- matrix(eitherOrTestResults,ncol=length(eitherOr),byrow=FALSE)#
              eitherOrTestResultsCombined <- aaply(eitherOrTestResults,1,#
              function(x){#
              	ifelse(all(x),TRUE,FALSE)#
              })#
              ##This indexes the matrix (and resaves it) by the test results .#
              ##So if the test came back TRUE, the model is kept. If the test is false,#
              ##it removes that row.#
              restrictedsMatrix<-restrictedsMatrix[eitherOrTestResultsCombined,]
unrestrictedsList<-list()
if(length(unrestricteds)!=0){#
                length(unrestrictedsList)<-length(unrestricteds)#
  		          unrestrictedsList<-llply(1:length(unrestricteds), #
  		                                    function(i){unrestrictedsList[[i]]<-c(TRUE, FALSE)},#
  		                                    .parallel=parallel)#
  		          unrestrictedsList<-c(unrestrictedsList, list(temp=1:nrow(restrictedsMatrix)))#
                names(unrestrictedsList)<-c(unrestricteds, "temp")#
  		        }
unrestrictedsList
unrestrictedsMatrix <- expand.grid(unrestrictedsList)
unrestrictedsMatrix
bindTogether<-function(i){cbind(unrestrictedsMatrix[unrestrictedsMatrix$temp==i,], restrictedsMatrix[i,])}
modelMatrix<-do.call("rbind",llply(1:nrow(restrictedsMatrix), bindTogether))
modelMatrix
modelMatrix$temp<-NULL
modelMatrix<-modelMatrix[colnames(x)]
modelMatrix
a
x <- a
varNames <- colnames(x)
allNothing
always
eitherOr
c(unlist(allNothing),always,unlist(eitherOr))
restricteds<-c(unlist(allNothing),always,unlist(eitherOr))
which(varNames%in%restricteds)
restrictedsIndex <- which(varNames%in%restricteds)#
  		        unrestricteds <- varNames[-restrictedsIndex]
alwaysCondition <- TRUE
replicate(length(allNothing),list(c(TRUE, FALSE)))
c(alwaysCondition=alwaysCondition, #
                                    allNothingCondition=allNothingCondition)
restrictedsList<-c(alwaysCondition=alwaysCondition, #
                                    allNothingCondition=allNothingCondition)
names(restrictedsList)[-1]
allNothingConditionNames <- names(restrictedsList)[-1]
allNothingConditionNames
allNothingCondition
restricteds[-c(which(restricteds%in%always), #
                                                which(restricteds%in%unlist(allNothing)))]
otherrestricteds<-restricteds[-c(which(restricteds%in%always), #
                                                which(restricteds%in%unlist(allNothing)))]
otherrestrictedsList<-list()#
               if(length(otherrestricteds)!=0){#
		          otherrestrictedsList<-llply(1:length(otherrestricteds),#
                                          function(i){otherrestrictedsList[[i]]<-c(TRUE, FALSE)},#
                                          .parallel=parallel)#
                                          }
otherrestricteds
names(otherrestrictedsList)<-otherrestricteds
c(restrictedsList, otherrestrictedsList)
restrictedsList<-c(restrictedsList, otherrestrictedsList)
restrictedsModels <- expand.grid(restrictedsList)
matrix(rep(FALSE),ncol=length(c(unlist(allNothing), always)), #
                                      nrow=nrow(restrictedsModels))
restrictedsModels
matrix(rep(FALSE),ncol=length(c(unlist(allNothing), always)), #
                                      nrow=nrow(restrictedsModels))
restrictedsMatrix <-matrix(rep(FALSE),ncol=length(c(unlist(allNothing), always)), #
                                      nrow=nrow(restrictedsModels))
colnames(restrictedsMatrix)<-c(unlist(allNothing), always)
restrictedsMatrix[,always]<-restrictedsModels[,"alwaysCondition"]
head(restrictedsMatrix)
for(i in 1:length(allNothing)){#
		restrictedsMatrix[,allNothing[[i]]]<-restrictedsModels[,allNothingConditionNames[i]]#
		}
head(restrictedsMatrix)
allNothingCondition
head(restrictedsModels)
allNothing
for(i in 1:length(allNothing)){#
		restrictedsMatrix[,allNothing[[i]]]<-restrictedsModels[,allNothingConditionNames[i]]#
		}
head(restrictedsModels)
head(restrictedsMatrix)
restricteds<-c(unlist(allNothing),always,unlist(eitherOr))#
  		        ##restrictedsIndex returns the index of the conditioned variables. #
              ##This is necessary because we want to separate the conditioned ones #
              ##from the unconditioned variables.#
  		        restrictedsIndex <- which(varNames%in%restricteds)#
  		        unrestricteds <- varNames[-restrictedsIndex]#
#
		          ##The always condition is always included.#
		          alwaysCondition <- TRUE#
		          ##The allNothing condition is either included or not included.#
		          allNothingCondition<-          replicate(length(allNothing),list(c(TRUE, FALSE)))#
		          ##The restrictedsList is all configurations for the conditioned variables combined.#
		          restrictedsList<-c(alwaysCondition=alwaysCondition, #
                                    allNothingCondition=allNothingCondition)#
              ##Save the list names of the allNothingConditions in order to use them as indices later.#
              allNothingConditionNames <- names(restrictedsList)[-1]#
              ##This is all restricteds that are not always or allNothing types#
  		        otherrestricteds<-restricteds[-c(which(restricteds%in%always), #
                                                which(restricteds%in%unlist(allNothing)))]#
              ##Make a list for the variables that are just going to be true false before they are #
              ##stripped away#
              otherrestrictedsList<-list()#
               if(length(otherrestricteds)!=0){#
		          otherrestrictedsList<-llply(1:length(otherrestricteds),#
                                          function(i){otherrestrictedsList[[i]]<-c(TRUE, FALSE)},#
                                          .parallel=parallel)#
                                          }#
                                           names(otherrestrictedsList)<-otherrestricteds#
              restrictedsList<-c(restrictedsList, otherrestrictedsList)#
#
              ##Expand grid on the conditioned variables.#
              restrictedsModels <- expand.grid(restrictedsList)#
              restrictedsMatrix <-matrix(rep(FALSE),ncol=length(c(unlist(allNothing), always)), #
                                      nrow=nrow(restrictedsModels))#
              colnames(restrictedsMatrix)<-c(unlist(allNothing), always)#
		          ##Put in the configurations for the alwaysCondition variables into restrictedsMatrix.#
		          restrictedsMatrix[,always]<-restrictedsModels[,"alwaysCondition"]#
#
		          ##Do the same for the allNothingCondition. Since the allNothingCondition is a list, each list should be considered separately.#
	for(i in 1:length(allNothing)){#
		restrictedsMatrix[,allNothing[[i]]]<-restrictedsModels[,allNothingConditionNames[i]]#
		}
head(restrictedsModels)
otherrestricteds
head(restrictedsMatrix)
restrictedsMatrix<-cbind(restrictedsMatrix,restrictedsModels[,otherrestricteds])
eitherOrTest<-function(x){length(which(x==TRUE))==1 | any(as.logical(x))==FALSE}
eitherOrTestResults <- NULL#
              for(i in 1:length(eitherOr)){#
              	eitherOrStripIndex <- unlist(alply(restrictedsMatrix[eitherOr[[i]]], 1, eitherOrTest))#
              	eitherOrTestResults <- c(eitherOrTestResults,eitherOrStripIndex)#
              	}
eitherOrTestResults
eitherOrCondition
eitherOr
eitherOrTestResults <- matrix(eitherOrTestResults,ncol=length(eitherOr),byrow=FALSE)
eitherOrTestResults
eitherOrTestResultsCombined <- aaply(eitherOrTestResults,1,#
              function(x){#
              	ifelse(all(x),TRUE,FALSE)#
              })
eitherOrTestResultsCombined
restrictedsMatrix<-restrictedsMatrix[eitherOrTestResultsCombined,]
restrictedsMatrix
eitherOr
allNothing
restrictedsMatrix[,6:9]
